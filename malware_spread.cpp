#include <bits/stdc++.h>
#include "dsu.h"
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);

        // Union connected nodes
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j]) {
                    dsu.unionSet(i, j);
                }
            }
        }

        // Count component sizes and malware occurrences
        vector<int> component_size(n, 0), malware_count(n, 0);
        for (int i = 0; i < n; i++) {
            component_size[dsu.find(i)]++;
        }
        for (int i : initial) {
            malware_count[dsu.find(i)]++;
        }

        // Sort initial to handle tie-breakers by index
        sort(initial.begin(), initial.end());

        // Determine the best node to remove
        int largest_component = -1, ans = -1;
        bool foundEffectiveNode = false;
        
        for (int i : initial) {
            int root = dsu.find(i);
            if (malware_count[root] == 1) {
                foundEffectiveNode = true;
                if (component_size[root] > largest_component || 
                    (component_size[root] == largest_component && i < ans)) {
                    ans = i;
                    largest_component = component_size[root];
                }
            }
        }

        return foundEffectiveNode ? ans : initial[0];
    }
};


int main() {
    Solution solution; // Creating an instance of Solution

    // Example graph and initial infected nodes
    vector<vector<int>> graph = {{1,1,0},{1,1,0},{0,0,1}};
    vector<int> initial = {0, 1, 2};

    // Calling the minMalwareSpread function and printing the result
    int result = solution.minMalwareSpread(graph, initial);
    cout << "The node to remove to minimize malware spread: " << result << endl;

    return 0;
}